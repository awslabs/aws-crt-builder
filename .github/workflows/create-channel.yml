name: Create Channel

# need images created at least once per branch, even if there are no docker changes
# so that downstream projects can use the branch channel. Also anytime this
# file is updated
on:
  push:
    branches:
      - '*'
      - '!main'
    paths:
      - '.github/workflows/create-channel.yml'
      - '.github/actions/**/*'
      - '.github/docker-images/**/*'
      - '.github/docker-images/entrypoint.sh'
      - '.github/workflows/*.sh'
  create:

env:
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: 'us-east-1'

# nothing
jobs:
  package:
    name: Package builder app
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2

    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: tag

    - name: Package builder to S3
      run: |
        export CHANNEL=${{ steps.tag.outputs.release_tag }}
        mkdir -p build
        mkdir -p staging
        cp -r builder staging/.
        python3 -m zipapp --python="/usr/bin/env python3" -m "builder.main:main" --output=build/builder staging
        aws s3 cp build/builder s3://$AWS_S3_BUCKET/channels/$CHANNEL/builder.pyz

    - name: Artifact builder
      uses: actions/upload-artifact@v1
      with:
        name: builder
        path: build/builder

    - name: Upload container CI script
      run: aws s3 cp ./.github/workflows/linux-container-ci.sh s3://aws-crt-test-stuff/ci/${{ steps.tag.outputs.release_tag }}/linux-container-ci.sh

  standard-images:
    name: ${{ matrix.variant }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant:
        - manylinux1-x86
        - manylinux1-x64
        - manylinux2014-x86
        - manylinux2014-x64
        - manylinux2014-aarch64
        - al2012-x64
        - al2-x64
        - ubuntu-18-x64
        - ubuntu-20-aarch64
        - debian-stretch-arm32v5
        - debian-stretch-arm32v7
        - node-10-linux-x64
        - swift-5-al2-x64
        - swift-5-centos-x64
        - swift-5-ubuntu-x64
        - rhel8-x64
        - opensuse-leap
        - fedora-34-x64

    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2

    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: tag

    - name: Login to docker repo
      run: aws ecr get-login-password --region us-east-1 | docker login ${{ secrets.AWS_ECR_REPO }} -u AWS --password-stdin

    - name: Install entrypoint
      run: cat .github/docker-images/entrypoint.sh | sed s/version=LATEST/version=${{ steps.tag.outputs.release_tag }}/ > .github/docker-images/${{ matrix.variant }}/entrypoint.sh

    - name: Install qemu/docker
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Build ${{ matrix.variant }} image
      uses: whoan/docker-build-with-cache-action@v5
      with:
        registry: ${{ secrets.AWS_ECR_REPO }}
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        image_name: aws-crt-${{ matrix.variant }}
        image_tag: ${{ steps.tag.outputs.release_tag }}
        context: .github/docker-images/${{ matrix.variant }}
        build_extra_args: --compress=true

    - name: Create ECR repo if necessary
      run: |
        if ! aws --region us-east-1 ecr describe-repositories --repository-names aws-crt-${{ matrix.variant }} > /dev/null 2>&1; then \
          aws --region us-east-1 ecr create-repository --repository-name aws-crt-${{ matrix.variant }}; \
        fi

    - name: Export ${{ matrix.variant }} image to ECR
      run: |
        export IMAGE_TAG=${{ steps.tag.outputs.release_tag }}
        docker push ${{ secrets.AWS_ECR_REPO }}/aws-crt-${{ matrix.variant }}:$IMAGE_TAG

  php-images:
    name: PHP ${{ matrix.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version:
        - "5.5"
        - "5.6"
        - "7.0"
        - "7.1"
        - "7.2"
        - "7.3"
        - "7.4"
        - "8.0"

    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2

    - name: Get release_tag
      uses: ./.github/actions/release-tag
      id: tag

    - name: Login to docker repo
      run: aws ecr get-login-password --region us-east-1 | docker login ${{ secrets.AWS_ECR_REPO }} -u AWS --password-stdin

    - name: Install entrypoint
      run: cat .github/docker-images/entrypoint.sh | sed s/version=LATEST/version=${{ steps.tag.outputs.release_tag }}/ > .github/docker-images/phpbrew-linux-x64/entrypoint.sh

    - name: Build ${{ matrix.version }} image
      uses: whoan/docker-build-with-cache-action@v5
      with:
        registry: ${{ secrets.AWS_ECR_REPO }}
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        image_name: aws-crt-php${{ matrix.version }}-linux-x64
        image_tag: ${{ steps.tag.outputs.release_tag }}
        context: .github/docker-images/phpbrew-linux-x64
        build_extra_args: --compress=true --build-arg PHP_VERSION=${{matrix.version}}

    - name: Create ECR repo if necessary
      run: |
        if ! aws --region us-east-1 ecr describe-repositories --repository-names aws-crt-php${{ matrix.version }}-linux-x64 > /dev/null 2>&1; then \
          aws --region us-east-1 ecr create-repository --repository-name aws-crt-php${{ matrix.version }}-linux-x64; \
        fi

    - name: Export PHP ${{ matrix.version }} image to ECR
      run: |
        export IMAGE_TAG=${{ steps.tag.outputs.release_tag }}
        docker push ${{ secrets.AWS_ECR_REPO }}/aws-crt-php${{ matrix.version }}-linux-x64:$IMAGE_TAG
