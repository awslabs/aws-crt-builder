name: Sanity Tests

on:
  push:
    branches:
      - '*'
      - '!master'
    paths:
      - '.github/workflows/sanity-test.yml'
      - 'builder/**'

jobs:
  cleanup:
    name: Clean up previous branch jobs
    runs-on: ubuntu-latest
    steps:
    - name: Clean up previous branch jobs
      uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  sanity_test:
    name: Sanity Test
    strategy:
      matrix:
        host: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.host }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@v1

      - name: Sanity Test Run Compat (Unix)
        if:  matrix.host != 'windows-latest'
        run: |
          python3 -m builder run test --project tests

      - name: Sanity Test Action (Unix)
        if:  matrix.host != 'windows-latest'
        run: |
          python3 -m builder test --project tests

      - name: Sanity Test Build (Unix)
        if:  matrix.host != 'windows-latest'
        run: |
          python3 -m builder build --project tests

      - name: Sanity Test Run Compat (Windows)
        if: matrix.host == 'windows-latest'
        run: |
          choco install --no-progress vswhere
          python -m builder run test --project tests

      - name: Sanity Test Action (Windows)
        if: matrix.host == 'windows-latest'
        run: |
          choco install --no-progress vswhere
          python -m builder test --project tests

      - name: Sanity Test Build (Windows)
        if: matrix.host == 'windows-latest'
        run: |
          python -m builder build --project tests

  cross-compile:
    name: Cross Compile ${{matrix.arch}}
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    needs: package
    strategy:
      matrix:
        arch: [linux-armv6, linux-armv7, linux-arm64]
  
    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Install builder
      uses: actions/download-artifact@v1
      with:
        name: builder

    - name: Build aws-c-common + consumers
      run: python builder\builder build downstream aws-crt-cpp --branch=cross-compile --platform=${{matrix.arch}} --dump-config

  # downstream_test:
  #   strategy:
  #     matrix:
  #       project:
  #         - aws-c-io
  #         - aws-c-mqtt
  #         - aws-c-http
  #         - aws-crt-python
  #         - aws-crt-cpp
  #         - aws-crt-java

  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Source
  #       uses: actions/checkout@v1

  #     - name: Build ${{ matrix.project }}
  #       run: python3 -m builder build --project ${{ matrix.project }}