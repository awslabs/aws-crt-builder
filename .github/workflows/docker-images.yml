name: Docker Images

on:
  push:
    branches:
      - '*'
      - '!master'
    paths:
      - '.github/actions/release-tag/*'
      - '.github/docker-images/**/*'
      - '.github/docker-images/entrypoint.sh'
      - '.github/workflows/docker-images.yml'
      - '.github/workflows/*.sh'
  # need images created at least once per branch, even if there are no docker changes
  # so that downstream projects can use the branch channel
  create:
  # Make new images for every published release
  release:
    types: [published]

env:
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: 'us-east-1'

jobs:
  cleanup:
    name: Clean up previous branch jobs
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Clean up previous branch jobs
      uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag:
    name: Artifact release tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v1
    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: release
      with:
        output: tag

    - run: echo TAG ${{ steps.release.outputs.release_tag }}

    - name: Store release_tag
      uses: actions/upload-artifact@v1
      with:
        name: release_tag
        path: tag

  package:
    name: Package builder app
    runs-on: ubuntu-latest
    needs: tag

    steps:
      - name: Checkout Source
        uses: actions/checkout@v1

      - name: Get release tag
        uses: ./.github/actions/release-tag
        id: release
        with:
          output: tag

      - run: echo TAG ${{ steps.release.outputs.release_tag }}

      - name: Store release_tag
        uses: actions/upload-artifact@v1
        with:
          name: release_tag
          path: tag

      # re-enable this when requirements.txt has actual dependencies
      # - name: Bundle dependencies
      #   run: |
      #     python3 -m pip install -r requirements.txt --target builder
      #     rm -rf builder/*.dist-info

      - name: Package builder to S3
        run: |
          mkdir -p build
          python3 -m zipapp --python="/usr/bin/env python3" --output=build/builder builder
          aws s3 cp build/builder s3://$AWS_S3_BUCKET/channels/${{ steps.release.outputs.release_tag }}/builder.pyz

      - name: Artifact builder
        uses: actions/upload-artifact@v1
        with:
          name: builder
          path: build/builder

  linux-x86-x64:
    name: ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: [tag]
    strategy:
      fail-fast: false
      matrix:
        variant:
        - manylinux1-x86
        - manylinux1-x64
        - manylinux2014-x86
        - manylinux2014-x64
        - al2012-x64
        - al2-x64
        - ubuntu-16-x64

    steps:
    - name: Checkout Sources
      uses: actions/checkout@v1

    - name: Fetch release_tag
      uses: actions/download-artifact@v1
      with:
        name: release_tag
        path: release_tag

    - name: Export IMAGE_TAG
      run: echo "::set-env name=IMAGE_TAG::$(cat release_tag/tag)"

    - name: Install entrypoint
      run: cat .github/docker-images/entrypoint.sh | sed s/version=LATEST/version=$IMAGE_TAG/ > .github/docker-images/${{ matrix.variant }}/entrypoint.sh

    - name: Build ${{ matrix.variant }} image
      uses: whoan/docker-build-with-cache-action@v4
      with:
        registry: docker.pkg.github.com
        username: awslabs
        password: ${{ secrets.DOCKER_TOKEN }}
        image_name: awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}
        image_tag: ${{ env.IMAGE_TAG }}
        context: .github/docker-images/${{ matrix.variant }}
        build_extra_args: --compress=true

    - name: Export ${{ matrix.variant }} image to S3/channels/${{ env.IMAGE_TAG }}
      run: |
        docker save docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}:${{ env.IMAGE_TAG }} > /tmp/aws-crt-${{ matrix.variant }}-${{ env.IMAGE_TAG }}.tar.gz
        aws s3 cp --no-progress /tmp/aws-crt-${{ matrix.variant }}-${{ env.IMAGE_TAG }}.tar.gz s3://${{env.AWS_S3_BUCKET}}/channels/${{ env.IMAGE_TAG }}/aws-crt-${{ matrix.variant }}.tar.gz
    
  publish-latest:
    name: Publish latest Builder/Docker images to S3
    runs-on: ubuntu-latest
    needs: [linux-x86-x64]
    if: github.event_name == 'release'
    steps:
    - name: Fetch release_tag
      uses: actions/download-artifact@v1
      with:
        name: release_tag
        path: release_tag

    - name: Export IMAGE_TAG
      run: echo "::set-env name=IMAGE_TAG::$(cat release_tag/tag)"
    
    - name: Copy deployment from channels/${{ env.IMAGE_TAG }} to LATEST, releases/${{ env.IMAGE_TAG }}
      run: |
        aws s3 cp --no-progress --recursive s3://${{env.AWS_S3_BUCKET}}/channels/${{ env.IMAGE_TAG }}/ s3://${{env.AWS_S3_BUCKET}}/LATEST/
        aws s3 cp --no-progress --recursive s3://${{env.AWS_S3_BUCKET}}/channels/${{ env.IMAGE_TAG }}/ s3://${{env.AWS_S3_BUCKET}}/releases/${{ env.IMAGE_TAG }}/
        $(aws --region us-east-1 ecr get-login --no-include-email)
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u awslabs --password-stdin
        for image in $(aws s3 ls --recursive s3://$AWS_S3_BUCKET/releases/v0.6.0/ | grep tar.gz | sed -E 's/.+releases.+aws-crt-(.+)\.tar\.gz/\1/'); do
          docker pull docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-$image:$IMAGE_TAG
          docker tag docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-$image:$IMAGE_TAG ${{ secrets.AWS_ECR_REPO }}/aws-crt/$image:latest
          docker push ${{ secrets.AWS_ECR_REPO }}/aws-crt/$image:latest
        done


  ###############################################################################
  # DOWNSTREAM TESTS
  ###############################################################################
  aws-c-common-linux-x64:
    name: Linux x64 aws-c-common test build
    runs-on: 'ubuntu-latest'
    if: github.event_name != 'release'
    needs: [linux-x86-x64]

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Get Release Tag
      uses: ./.github/actions/release-tag
      id: release

    # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build aws-c-common + consumers
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u awslabs --password-stdin
        docker pull docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-ubuntu-16-x64:${{ steps.release.outputs.release_tag }}
        docker run --env GITHUB_REF docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-ubuntu-16-x64:${{ steps.release.outputs.release_tag }} --version=${{ steps.release.outputs.release_tag }} build -p aws-c-common downstream --compiler=clang-9

  aws-c-common-osx:
    name: OSX aws-c-common test build
    runs-on: 'macos-latest'
    if: github.event_name != 'release'
    needs: package

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Install builder
      uses: actions/download-artifact@v1
      with:
        name: builder
    - run: |
        cp builder/builder /usr/local/bin/
        chmod a+x /usr/local/bin/builder

    - name: Build aws-c-common + consumers
      run: builder build default-downstream -p aws-c-common --dump-config

  aws-c-common-windows-vs2019:
    name: Windows (VS2019) aws-c-common test build
    runs-on: 'windows-latest'
    if: github.event_name != 'release'
    needs: package

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Install builder
      uses: actions/download-artifact@v1
      with:
        name: builder

    - name: Build aws-c-common + consumers
      run: python builder\builder build default-downstream -p aws-c-common --dump-config

  ci-passed:
    name: Downstream Tests Passed
    runs-on: 'ubuntu-latest'
    needs:
    - aws-c-common-linux-x64
    - aws-c-common-osx
    - aws-c-common-windows-vs2019
    steps:
      - run: echo "All downstream tests passed"