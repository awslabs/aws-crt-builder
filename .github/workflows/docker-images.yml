name: Docker Images

on:
  push:
    branches:
      - '*'
      - '!master'
    paths:
      - '.github/actions/**'
      - '.github/docker-images/**/Dockerfile'
      - '.github/docker-images/entrypoint.sh'
      - '.github/workflows/docker-images.yml'
      - '.github/workflows/*.sh'
      - 'builder/**'
  release:
    types: [published]

env:
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: 'us-east-1'

jobs:
  cleanup:
    name: Clean up previous branch jobs
    runs-on: ubuntu-latest
    steps:
    - name: Clean up previous branch jobs
      uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag:
    name: Artifact release tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v1
    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: release
      with:
        output: tag

    - run: echo TAG ${{ steps.release.outputs.release_tag }}

    - name: Store release_tag
      uses: actions/upload-artifact@v1
      with:
        name: release_tag
        path: tag

  package:
    name: Package builder app
    runs-on: ubuntu-latest
    needs: tag

    steps:
      - name: Checkout Source
        uses: actions/checkout@v1

      # re-enable this when requirements.txt has actual dependencies
      # - name: Bundle dependencies
      #   run: |
      #     python3 -m pip install -r requirements.txt --target builder
      #     rm -rf builder/*.dist-info

      - name: Package builder
        run: |
          mkdir -p build
          python3 -m zipapp --python="/usr/bin/env python3" --output=build/builder builder

      - name: Store builder
        uses: actions/upload-artifact@v1
        with:
          name: builder
          path: build/builder

      - name: Get release tag
        uses: ./.github/actions/release-tag
        id: release
        with:
          output: tag

      - run: echo TAG ${{ steps.release.outputs.release_tag }}

      - name: Store release_tag
        uses: actions/upload-artifact@v1
        with:
          name: release_tag
          path: tag

      - name: Publish builder package to S3
        run: aws s3 cp build/builder s3://$AWS_S3_BUCKET/${{ steps.release.outputs.release_tag }}/builder

  linux-x86-x64:
    name: ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: [tag, package]
    strategy:
      fail-fast: false
      matrix:
        variant:
        - manylinux1-x86
        - manylinux1-x64
        - manylinux2014-x86
        - manylinux2014-x64
        - al2-x64
        - ubuntu-16-x64

    steps:
    - name: Checkout Sources
      uses: actions/checkout@v1

    - name: Fetch release_tag
      uses: actions/download-artifact@v1
      with:
        name: release_tag
        path: release_tag

    - name: Export IMAGE_TAG
      run: echo "::set-env name=IMAGE_TAG::$(cat release_tag/tag)"

    - name: Install builder
      run: |
        aws s3 cp s3://$AWS_S3_BUCKET/$IMAGE_TAG/builder .github/docker-images/${{ matrix.variant }}/builder
        cp -v .github/docker-images/entrypoint.sh .github/docker-images/${{ matrix.variant }}/entrypoint.sh

    - name: Build ${{ matrix.variant }} image
      run: .github/workflows/docker_buildx.sh \
        docker.pkg.github.com \
        awslabs \
        ${{ secrets.DOCKER_TOKEN }} \
        awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }} \
        ${{ env.IMAGE_TAG }} \
        .github/docker-images/${{ matrix.variant }} \
        --compress=true

    - name: Export ${{ matrix.variant }} image
      run: |
        docker save docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}:${{ env.IMAGE_TAG }} | gzip > /tmp/aws-crt-${{ matrix.variant }}-${{ env.IMAGE_TAG }}.tar.gz
        aws s3 cp --no-progress /tmp/aws-crt-${{ matrix.variant }}-${{ env.IMAGE_TAG }}.tar.gz s3://${{env.AWS_S3_BUCKET}}/_docker/aws-crt-${{ matrix.variant }}-${{ env.IMAGE_TAG }}.tar.gz

  linux-arm64:
    name: ${{ matrix.variant }}-${{ matrix.arch }}
    runs-on: 'ubuntu-latest'
    needs: [tag, package]
    strategy:
      matrix:
        variant: [al2]
        arch: [arm64]
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v1

    - name: Fetch release_tag
      uses: actions/download-artifact@v1
      with:
        name: release_tag
        path: release_tag

    - name: Export IMAGE_TAG
      run: echo "::set-env name=IMAGE_TAG::$(cat release_tag/tag)"

    - name: Install builder
      run: |
        aws s3 cp s3://$AWS_S3_BUCKET/$IMAGE_TAG/builder .github/docker-images/${{ matrix.variant }}-${{ matrix.arch }}/builder
        cp -v .github/docker-images/entrypoint.sh .github/docker-images/${{ matrix.variant }}-${{ matrix.arch }}/entrypoint.sh

    - name: "Build ${{ matrix.variant }}-${{ matrix.arch }} image"
      run: .github/workflows/docker_buildx.sh \
        docker.pkg.github.com \
        awslabs \
        ${{ secrets.DOCKER_TOKEN }} \
        awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}-${{ matrix.arch }} \
        ${{ env.IMAGE_TAG }} \
        .github/docker-images/${{ matrix.variant }}-${{ matrix.arch }} \
        --compress=true --platform=linux/${{ matrix.arch }}

    - name: Export ${{ matrix.variant }} ${{ matrix.arch }} image
      run: |
        docker save docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}-${{ matrix.arch }}:${{ env.IMAGE_TAG }} | gzip > /tmp/aws-crt-${{ matrix.variant }}-${{ matrix.arch }}-${{ env.IMAGE_TAG }}.tar.gz
        aws s3 cp --no-progress /tmp/aws-crt-${{ matrix.variant }}-${{ matrix.arch }}-${{ env.IMAGE_TAG }}.tar.gz s3://${{env.AWS_S3_BUCKET}}/_docker/aws-crt-${{ matrix.variant }}-${{ matrix.arch }}-${{ env.IMAGE_TAG }}.tar.gz

  linux-arm32:
    name: ${{ matrix.variant }}-arm${{ matrix.arch }}
    runs-on: 'ubuntu-latest'
    needs: [tag, package]
    strategy:
      fail-fast: false
      matrix:
        variant: [alpine, raspbian]
        arch: [v6, v7]
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v1

    - name: Fetch release_tag
      uses: actions/download-artifact@v1
      with:
        name: release_tag
        path: release_tag

    - name: Export IMAGE_TAG
      run: echo "::set-env name=IMAGE_TAG::$(cat release_tag/tag)"

    - name: Install builder
      run: |
        aws s3 cp s3://$AWS_S3_BUCKET/$IMAGE_TAG/builder .github/docker-images/${{ matrix.variant }}-arm${{ matrix.arch }}/builder
        cp -v .github/docker-images/entrypoint.sh .github/docker-images/${{ matrix.variant }}-arm${{ matrix.arch }}/entrypoint.sh

    - name: "Build ${{ matrix.variant }}-arm${{ matrix.arch }} image"
      run: .github/workflows/docker_buildx.sh \
        docker.pkg.github.com \
        awslabs \
        ${{ secrets.DOCKER_TOKEN }} \
        awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}-arm${{ matrix.arch }} \
        ${{ env.IMAGE_TAG }} \
        .github/docker-images/${{ matrix.variant }}-arm${{ matrix.arch }} \
        --compress=true --platform=linux/arm/${{ matrix.arch }}

    - name: Export ${{ matrix.variant }} arm${{ matrix.arch }} image
      run: |
        docker save docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-${{ matrix.variant }}-arm${{ matrix.arch }}:${{ env.IMAGE_TAG }} | gzip > /tmp/aws-crt-${{ matrix.variant }}-arm${{ matrix.arch }}-${{ env.IMAGE_TAG }}.tar.gz
        aws s3 cp --no-progress /tmp/aws-crt-${{ matrix.variant }}-arm${{ matrix.arch }}-${{ env.IMAGE_TAG }}.tar.gz s3://${{env.AWS_S3_BUCKET}}/_docker/aws-crt-${{ matrix.variant }}-arm${{ matrix.arch }}-${{ env.IMAGE_TAG }}.tar.gz

###############################################################################
# DOWNSTREAM TESTS
###############################################################################
  aws-c-common-linux-x64:
    name: Linux x64 aws-c-common test build
    runs-on: 'ubuntu-latest'
    if: github.event_name != 'release'
    needs: linux-x86-x64

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Get Release Tag
      uses: ./.github/actions/release-tag
      id: release

    # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build aws-c-common + consumers
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u awslabs --password-stdin
        docker pull docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-ubuntu-16-x64:${{ steps.release.outputs.release_tag }}
        docker run --env GITHUB_REF docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-ubuntu-16-x64:${{ steps.release.outputs.release_tag }} build -p aws-c-common downstream --compiler=clang-9

  aws-c-common-raspbian-armv6:
    name: Raspbian armv6 aws-c-common test build
    runs-on: 'ubuntu-latest'
    if: github.event_name != 'release'
    needs: linux-arm32

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Get Release Tag
      uses: ./.github/actions/release-tag
      id: release

    - name: Bootstrap docker-buildx
      run: .github/workflows/install_buildx.sh

    # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build aws-c-common + consumers
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u awslabs --password-stdin
        docker pull docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-raspbian-armv6:${{ steps.release.outputs.release_tag }}
        docker run --env GITHUB_REF docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-raspbian-armv6:${{ steps.release.outputs.release_tag }} build -p aws-c-common downstream

  aws-c-common-alpine-armv7:
    name: Alpine ARMv7 aws-c-common test build
    runs-on: 'ubuntu-latest'
    if: github.event_name != 'release'
    needs: linux-arm32

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Get Release Tag
      uses: ./.github/actions/release-tag
      id: release

    - name: Bootstrap docker-buildx
      run: .github/workflows/install_buildx.sh

    # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build aws-c-common + consumers
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u awslabs --password-stdin
        docker pull docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-alpine-armv7:${{ steps.release.outputs.release_tag }}
        docker run --env GITHUB_REF docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-alpine-armv7:${{ steps.release.outputs.release_tag }} build -p aws-c-common downstream

  aws-c-common-al2-armv8:
    name: al2 armv8 aws-c-common test build
    runs-on: 'ubuntu-latest'
    if: github.event_name != 'release'
    needs: linux-arm64

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Get Release Tag
      uses: ./.github/actions/release-tag
      id: release

    - name: Bootstrap docker-buildx
      run: .github/workflows/install_buildx.sh

    # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build aws-c-common + consumers
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u awslabs --password-stdin
        docker pull docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-al2-arm64:${{ steps.release.outputs.release_tag }}
        docker run --env GITHUB_REF docker.pkg.github.com/awslabs/aws-crt-builder/aws-crt-al2-arm64:${{ steps.release.outputs.release_tag }} build -p aws-c-common downstream

  aws-c-common-osx:
    name: OSX aws-c-common test build
    runs-on: 'macos-latest'
    if: github.event_name != 'release'
    needs: package

    steps:
    - name: Checkout Source
      uses: actions/checkout@v1

    - name: Install builder
      uses: actions/download-artifact@v1
      with:
        name: builder
    - run: |
        cp builder/builder /usr/local/bin/
        chmod a+x /usr/local/bin/builder

    - name: Build aws-c-common + consumers
      run: builder build default-downstream -p aws-c-common --dump-config

  aws-c-common-windows-vs2019:
      name: Windows (VS2019) aws-c-common test build
      runs-on: 'windows-latest'
      if: github.event_name != 'release'
      needs: package

      steps:
      - name: Checkout Source
        uses: actions/checkout@v1

      - name: Install builder
        uses: actions/download-artifact@v1
        with:
          name: builder

      - name: Build aws-c-common + consumers
        run: python builder\builder build default-downstream -p aws-c-common --dump-config

  ci-passed:
    name: Downstream Tests Passed
    runs-on: 'ubuntu-latest'
    needs:
    - aws-c-common-linux-x64
    - aws-c-common-osx
    - aws-c-common-windows-vs2019
    - aws-c-common-alpine-armv7
    - aws-c-common-raspbian-armv6
    - aws-c-common-al2-armv8
    steps:
      - run: echo "All downstream tests passed"