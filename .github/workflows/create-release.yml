name: Create Release

# Make new images for every published release
on:
  release:
    types: [published]
  workflow_dispatch:

env:
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  CRT_CI_ROLE: ${{ secrets.CRT_CI_ROLE_ARN }}
  AWS_DEFAULT_REGION: us-east-1

permissions:
  id-token: write # This is required for requesting the JWT

jobs:
  package:
    name: Package builder app
    runs-on: ubuntu-24.04

    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.CRT_CI_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.CRT_CI_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Checkout Source
      uses: actions/checkout@v4

    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: tag

    # re-enable this when requirements.txt has actual dependencies
    # - name: Bundle dependencies
    #   run: |
    #     python3 -m pip install -r requirements.txt --target builder
    #     rm -rf builder/*.dist-info

    - name: Package builder to S3
      run: |
        mkdir -p build
        mkdir -p staging
        cp -r builder staging/.
        python3 -m zipapp --python="/usr/bin/env python3" -m "builder.main:main" --output=build/builder staging
        aws s3 cp build/builder s3://$AWS_S3_BUCKET/releases/${{ steps.tag.outputs.release_tag }}/builder.pyz

    - name: Artifact builder
      uses: actions/upload-artifact@v4
      with:
        name: builder
        path: build/builder

  export-linux-images:
    name: Release aws-crt-${{ matrix.variant }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        variant:
        - name: manylinux1-x86
        - name: manylinux1-x64
        - name: manylinux2014-x86
        - name: manylinux2014-x64
        - name: manylinux2014-aarch64
        - name: musllinux-1-1-aarch64
        - name: musllinux-1-1-x64
        - name: al2012-x64
        - name: al2-x64
        - name: al2023-x64
        - name: ubuntu-18-x64
        - name: ubuntu-20-x64
        - name: ubuntu-20-aarch64  
          extra-build-flag: --platform=linux/aarch64
        - name: ubuntu-22-x64
        - name: node-10-linux-x64
        - name: swift-5-al2-x64
        - name: swift-5-centos-x64
        - name: swift-5-ubuntu-x64
        - name: rhel8-x64
        - name: opensuse-leap
        - name: fedora-34-x64
        - name: raspbian-bullseye
        - name: alpine-3.16-x64
        - name: alpine-3.16-x86
        - name: alpine-3.16-arm64
        - name: alpine-3.16-armv7
        - name: alpine-3.16-armv6
        - name: openwrt-x64-openjdk8

    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.CRT_CI_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Checkout Sources
      uses: actions/checkout@v4

    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: tag

    - name: Install entrypoint
      run: cat .github/docker-images/entrypoint.sh | sed s/version=LATEST/version=${{ steps.tag.outputs.release_tag }}/ > .github/docker-images/${{ matrix.variant.name }}/entrypoint.sh

    - name: Install qemu/docker
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Build aws-crt-${{ matrix.variant.name }} image
      uses: whoan/docker-build-with-cache-action@v8
      with:
        registry: ${{ secrets.AWS_ECR_REPO }}
        username: ${{ steps.creds.outputs.aws-access-key-id }}
        password: ${{ steps.creds.outputs.aws-secret-access-key }}
        session: ${{ steps.creds.outputs.aws-session-token }}
        image_name: aws-crt-${{ matrix.variant.name }}
        image_tag: ${{ steps.tag.outputs.release_tag }}
        context: .github/docker-images/${{ matrix.variant.name }}
        build_extra_args: --compress=true ${{ matrix.variant.extra-build-flag }}
        
    - name: Login to docker repos
      run: |
        aws ecr get-login-password --region us-east-1 | docker login ${{ secrets.AWS_ECR_REPO }} -u AWS --password-stdin

    - name: Create ECR repo if necessary
      run: |
        if ! aws --region us-east-1 ecr describe-repositories --repository-names aws-crt-${{ matrix.variant.name }} > /dev/null 2>&1; then \
          aws --region us-east-1 ecr create-repository --repository-name aws-crt-${{ matrix.variant.name }}; \
        fi

    - name: Tag/push release images as latest
      run: |
        export IMAGE_TAG=${{ steps.tag.outputs.release_tag }}
        docker tag ${{ secrets.AWS_ECR_REPO }}/aws-crt-${{ matrix.variant.name }}:$IMAGE_TAG ${{ secrets.AWS_ECR_REPO }}/aws-crt-${{ matrix.variant.name }}:latest
        docker push ${{ secrets.AWS_ECR_REPO }}/aws-crt-${{ matrix.variant.name }}:$IMAGE_TAG
        docker push ${{ secrets.AWS_ECR_REPO }}/aws-crt-${{ matrix.variant.name }}:latest

    - name: Export aws-crt-${{ matrix.variant.name }} image to S3/releases
      run: |
        export IMAGE_TAG=${{ steps.tag.outputs.release_tag }}
        docker save ${{ secrets.AWS_ECR_REPO }}/aws-crt-${{ matrix.variant.name }}:$IMAGE_TAG \
        | gzip \
        | aws s3 cp - s3://${{env.AWS_S3_BUCKET}}/releases/$IMAGE_TAG/aws-crt-${{ matrix.variant.name }}.tar.gz
        aws s3 cp s3://${{env.AWS_S3_BUCKET}}/releases/$IMAGE_TAG/aws-crt-${{ matrix.variant.name }}.tar.gz s3://${{env.AWS_S3_BUCKET}}/LATEST/aws-crt-${{ matrix.variant.name }}.tar.gz

  upload-ci-script:
    name: Upload container ci script
    runs-on: ubuntu-24.04

    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.CRT_CI_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Checkout Source
      uses: actions/checkout@v4

    - name: Get release tag
      uses: ./.github/actions/release-tag
      id: tag

    - name: Upload script
      run: aws s3 cp ./.github/workflows/linux-container-ci.sh s3://aws-crt-test-stuff/ci/${{ steps.tag.outputs.release_tag }}/linux-container-ci.sh
